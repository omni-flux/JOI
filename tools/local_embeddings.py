import numpy as np

class LocalEmbeddingGenerator:
    def __init__(self, vector_size=512):
        """Initialize the local embedding generator with basic parameters.
        
        Args:
            vector_size (int): Dimensionality of the embeddings
        """
        self.vector_size = vector_size
        np.random.seed(42)  # For consistent vector generation
        
    def _preprocess_text(self, text):
        """Basic text preprocessing."""
        return text.lower()
    
    def get_embedding(self, text: str) -> list:
        """Generate simple numerical vector representation for the input text.
        
        Args:
            text (str): The text to generate embeddings for
            
        Returns:
            list: The generated embedding vector
        """
        try:
            # Preprocess text
            processed_text = self._preprocess_text(text)
            
            # Generate a deterministic vector based on the text
            # Using text characteristics to influence the vector
            seed = sum(ord(c) for c in processed_text)
            np.random.seed(seed)
            
            # Generate vector
            vector = np.random.uniform(-1, 1, self.vector_size)
            
            # Normalize the vector
            vector = vector / np.linalg.norm(vector)
            
            return vector.tolist()
            
        except Exception as e:
            print(f"Error generating embedding: {e}")
            return [0.0] * self.vector_size
    
    def get_dimension(self) -> int:
        """Get the dimension of the embeddings generated by this model.
        
        Returns:
            int: The embedding dimension
        """
        return self.vector_size